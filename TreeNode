struct TreeNode {
  val: i32,
  left: Option<Box<TreeNode>>,
  right: Option<Box<TreeNode>>,
}

impl TreeNode {
  #[allow(dead_code)]
  fn new(val: i32) -> Self {
    TreeNode {
      val,
      left: None,
      right: None,
    }
  }
}

fn max_depth(root: Option<&TreeNode>) -> i32 {
  if root.is_none() {
    return 0;
  }

  let left_depth = max_depth(root.unwrap().left.as_ref());
  let right_depth = max_depth(root.unwrap().right.as_ref());

  std::cmp::max(left_depth, right_depth) + 1
}

fn main() {
  let mut root = TreeNode::new(3);
  root.left = Some(Box::new(TreeNode::new(9)));
  root.right = Some(Box::new(TreeNode::new(20)));
  root.right.unwrap().left = Some(Box::new(TreeNode::new(15)));
  root.right.unwrap().right = Some(Box::new(TreeNode::new(7)));

  let max_d = max_depth(Some(&root));
  println!("Maximum depth of the binary tree: {}", max_d);
}
